
import streamlit as st
import pandas as pd
import joblib
from fpdf import FPDF
import tempfile

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –∏ –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
model = joblib.load("postop_model_logreg.pkl")
preprocessor = joblib.load("postop_preprocessor.pkl")

st.image("icon.png", width=72)
st.title("–ü—Ä–æ–≥–Ω–æ–∑ –æ—Å–ª–æ–∂–Ω–µ–Ω–∏–π –ø–æ—Å–ª–µ –±–∞—Ä–∏–∞—Ç—Ä–∏—á–µ—Å–∫–æ–π —Ö–∏—Ä—É—Ä–≥–∏–∏")

expected_features = {
    "–ù–∞–ª–∏—á–∏–µ —Ä–≤–æ—Ç—ã –ø–æ—Å–ª–µ –æ–ø–µ—Ä–∞—Ü–∏–∏": "object",
    "–ê–±–¥–æ–º–∏–Ω–∞–ª—å–Ω–∞—è –±–æ–ª—å, –í–ê–®": "float",
    "–¢–µ–º–ø": "float",
    "–ß–°–°, —É–¥/–º–∏–Ω": "float",
    "–õ–µ–π–∫–æ—Ü–∏—Ç—ã 1": "float",
    "–ì–µ–º–æ–≥–ª–æ–±–∏–Ω 1": "float",
    "–°–†–ë, –º–≥/–ª": "float",
    "–î-–¥–∏–º–µ—Ä, –Ω–≥/–º–ª": "float"
}

with st.form("input_form"):
    vomit = st.selectbox("–†–≤–æ—Ç–∞ –ø–æ—Å–ª–µ –æ–ø–µ—Ä–∞—Ü–∏–∏", ["–Ω–µ—Ç", "–¥–∞"])
    pain = st.slider("–ë–æ–ª—å (–í–ê–®)", 0, 10, 0)
    temp = st.number_input("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Ç–µ–ª–∞ (¬∞C)", value=36.6)
    pulse = st.number_input("–ü—É–ª—å—Å (—É–¥/–º–∏–Ω)", value=80)
    wbc = st.number_input("–õ–µ–π–∫–æ—Ü–∏—Ç—ã", value=6.0)
    hb = st.number_input("–ì–µ–º–æ–≥–ª–æ–±–∏–Ω", value=120.0)
    crp = st.number_input("–°–†–ë", value=10.0)
    dd = st.number_input("D-–¥–∏–º–µ—Ä", value=300.0)
    submitted = st.form_submit_button("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∏—Å–∫")

if submitted:
    raw_input = {
        "–ù–∞–ª–∏—á–∏–µ —Ä–≤–æ—Ç—ã –ø–æ—Å–ª–µ –æ–ø–µ—Ä–∞—Ü–∏–∏": vomit,
        "–ê–±–¥–æ–º–∏–Ω–∞–ª—å–Ω–∞—è –±–æ–ª—å, –í–ê–®": pain,
        "–¢–µ–º–ø": temp,
        "–ß–°–°, —É–¥/–º–∏–Ω": pulse,
        "–õ–µ–π–∫–æ—Ü–∏—Ç—ã 1": wbc,
        "–ì–µ–º–æ–≥–ª–æ–±–∏–Ω 1": hb,
        "–°–†–ë, –º–≥/–ª": crp,
        "–î-–¥–∏–º–µ—Ä, –Ω–≥/–º–ª": dd
    }

    prepared = {}
    for feature, dtype in expected_features.items():
        val = raw_input.get(feature)
        if dtype == "object":
            prepared[feature] = str(val) if val is not None else ""
        else:
            try:
                prepared[feature] = float(val)
            except:
                prepared[feature] = 0.0

    df = pd.DataFrame([prepared])[list(expected_features.keys())]

    try:
        X = preprocessor.transform(df)
        prob = model.predict_proba(X)[0][1]
        st.markdown(f"### –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–ª–æ–∂–Ω–µ–Ω–∏–π: {prob:.2%}")
        if prob >= 0.5:
            st.error("‚ö†Ô∏è –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ –æ—Å–ª–æ–∂–Ω–µ–Ω–∏–π. –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ.")
        else:
            st.success("‚úÖ –ù–∏–∑–∫–∏–π —Ä–∏—Å–∫ –æ—Å–ª–æ–∂–Ω–µ–Ω–∏–π.")

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF
        pdf = FPDF()
        pdf.add_page()
        pdf.add_font("Arial", "", fname="/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf", uni=True)
        pdf.set_font("Arial", "", 12)
        pdf.cell(200, 10, "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è", ln=True, align="C")
        pdf.ln(5)

        for k, v in prepared.items():
            pdf.cell(0, 10, f"{k}: {v}", ln=True)

        pdf.ln(5)
        pdf.set_text_color(200, 0, 0) if prob >= 0.5 else pdf.set_text_color(0, 100, 0)
        pdf.set_font("Arial", "B", 12)
        pdf.cell(0, 10, f"–†–∏—Å–∫ –æ—Å–ª–æ–∂–Ω–µ–Ω–∏–π: {prob:.2%}", ln=True)

        # –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        tmpfile = tempfile.NamedTemporaryFile(delete=False, suffix=".pdf")
        pdf.output(tmpfile.name)
        tmpfile.flush()

        with open(tmpfile.name, "rb") as f:
            st.download_button("üìÑ –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ PDF", data=f, file_name="—Ä–µ–∑—É–ª—å—Ç–∞—Ç_–ø—Ä–æ–≥–Ω–æ–∑–∞.pdf")

    except Exception as e:
        st.exception(e)
